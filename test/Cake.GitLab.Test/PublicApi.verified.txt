namespace Cake.GitLab
{
    [Cake.Core.Annotations.CakeAliasCategory("GitLab")]
    [Cake.Core.Annotations.CakeNamespaceImport("Cake.GitLab")]
    public static class GitLabAliases
    {
        public static System.Threading.Tasks.Task<NGitLab.Models.Pipeline> GitLabGetPipelineAsync(this Cake.GitLab.IGitLabConnectionCakeContext context, NGitLab.Models.ProjectId project, int pipelineId) { }
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<NGitLab.Models.Pipeline> GitLabGetPipelineAsync(this Cake.Core.ICakeContext context, Cake.GitLab.GitLabConnection connection, NGitLab.Models.ProjectId project, int pipelineId) { }
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<NGitLab.Models.Pipeline> GitLabGetPipelineAsync(this Cake.Core.ICakeContext context, string serverUrl, string accessToken, NGitLab.Models.ProjectId project, int pipelineId) { }
        [Cake.Core.Annotations.CakeMethodAlias]
        public static Cake.GitLab.GitLabProjectIdentity? GitLabGetProjectFromRemoteUrl(this Cake.Core.ICakeContext context, string remoteUrl) { }
        public static System.Threading.Tasks.Task GitLabRepositoryDownloadFileAsync(this Cake.GitLab.IGitLabConnectionCakeContext context, NGitLab.Models.ProjectId project, string filePath, string @ref, Cake.Core.IO.FilePath destination) { }
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task GitLabRepositoryDownloadFileAsync(this Cake.Core.ICakeContext context, Cake.GitLab.GitLabConnection connection, NGitLab.Models.ProjectId project, string filePath, string @ref, Cake.Core.IO.FilePath destination) { }
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task GitLabRepositoryDownloadFileAsync(this Cake.Core.ICakeContext context, string serverUrl, string accessToken, NGitLab.Models.ProjectId project, string filePath, string @ref, Cake.Core.IO.FilePath destination) { }
        public static System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.Branch> GitLabRepositoryGetBranches(this Cake.GitLab.IGitLabConnectionCakeContext context, NGitLab.Models.ProjectId project) { }
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.Branch> GitLabRepositoryGetBranches(this Cake.Core.ICakeContext context, Cake.GitLab.GitLabConnection connection, NGitLab.Models.ProjectId project) { }
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.Branch> GitLabRepositoryGetBranches(this Cake.Core.ICakeContext context, string serverUrl, string accessToken, NGitLab.Models.ProjectId project) { }
    }
    public class GitLabConnection : System.IEquatable<Cake.GitLab.GitLabConnection>
    {
        public GitLabConnection(string ServerUrl, string AccessToken) { }
        public string AccessToken { get; init; }
        public string ServerUrl { get; init; }
    }
    public sealed class GitLabProjectIdentity : System.IEquatable<Cake.GitLab.GitLabProjectIdentity>
    {
        public GitLabProjectIdentity(string host, string @namespace, string project) { }
        public string Host { get; init; }
        public string Namespace { get; init; }
        public string ProjectPath { get; init; }
        public string Project { get; init; }
        public bool Equals(Cake.GitLab.GitLabProjectIdentity? other) { }
        public override int GetHashCode() { }
    }
    public interface IGitLabConnectionCakeContext : Cake.Core.ICakeContext
    {
        Cake.GitLab.GitLabConnection Connection { get; }
    }
    public interface IGitlabClientFactory
    {
        NGitLab.IGitLabClient GetClient(string serverUrl, string accessToken);
    }
}