namespace Cake.GitLab
{
    public class DefaultGitLabProvider : Cake.GitLab.IGitLabProvider
    {
        public DefaultGitLabProvider(Cake.Core.ICakeContext context) { }
        protected virtual NGitLab.IGitLabClient GetClient(string serverUrl, string accessToken) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.MergeRequest>> GetMergeRequestsAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project, Cake.GitLab.GetMergeRequestsOptions? options) { }
        public System.Threading.Tasks.Task<NGitLab.Models.Pipeline> GetPipelineAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project, long pipelineId) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.Job>> GetPipelineJobsAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project, long pipelineId, Cake.GitLab.GetPipelineJobsOptions? options) { }
        public System.Threading.Tasks.Task<NGitLab.Models.Project> GetProjectAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project) { }
        public System.Threading.Tasks.Task<NGitLab.Models.Tag> RepositoryCreateTagAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project, string @ref, string name) { }
        public System.Threading.Tasks.Task RepositoryDownloadFileAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project, string filePath, string @ref, Cake.Core.IO.FilePath destination) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.Branch>> RepositoryGetBranchesAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string>> RepositoryGetFilesAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project, string @ref) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string>> RepositoryGetFilesAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project, string @ref, string path) { }
        public System.Threading.Tasks.Task SetPipelineNameAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project, long pipelineId, string name) { }
        public Cake.GitLab.ProjectIdentity? TryGetCurrentProjectIdentity() { }
        public Cake.GitLab.ServerIdentity? TryGetCurrentServerIdentity() { }
    }
    public class GetMergeRequestsOptions
    {
        public GetMergeRequestsOptions() { }
        public string? SourceBranch { get; set; }
        public Cake.GitLab.MergeRequestState? State { get; set; }
        public string? TargetBranch { get; set; }
    }
    public class GetPipelineJobsOptions
    {
        public GetPipelineJobsOptions() { }
        public bool? IncludeRetried { get; set; }
        public System.Collections.Generic.IList<Cake.GitLab.JobScope>? Scopes { get; set; }
    }
    [Cake.Core.Annotations.CakeAliasCategory("GitLab")]
    [Cake.Core.Annotations.CakeNamespaceImport("Cake.GitLab")]
    public static class GitLabAliases
    {
        [Cake.Core.Annotations.CakeAliasCategory("MergeRequests")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.MergeRequest>> GitLabGetMergeRequestsAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectConnection projectConnection, Cake.GitLab.GetMergeRequestsOptions? options = null) { }
        [Cake.Core.Annotations.CakeAliasCategory("MergeRequests")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.MergeRequest>> GitLabGetMergeRequestsAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectIdentity projectIdentity, string accessToken, Cake.GitLab.GetMergeRequestsOptions? options = null) { }
        [Cake.Core.Annotations.CakeAliasCategory("MergeRequests")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.MergeRequest>> GitLabGetMergeRequestsAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerConnection serverConnection, NGitLab.Models.ProjectId project, Cake.GitLab.GetMergeRequestsOptions? options = null) { }
        [Cake.Core.Annotations.CakeAliasCategory("MergeRequests")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.MergeRequest>> GitLabGetMergeRequestsAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerIdentity serverIdentity, string accessToken, NGitLab.Models.ProjectId project, Cake.GitLab.GetMergeRequestsOptions? options = null) { }
        [Cake.Core.Annotations.CakeAliasCategory("MergeRequests")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.MergeRequest>> GitLabGetMergeRequestsAsync(this Cake.Core.ICakeContext context, string serverUrl, string accessToken, NGitLab.Models.ProjectId project, Cake.GitLab.GetMergeRequestsOptions? options = null) { }
        [Cake.Core.Annotations.CakeAliasCategory("Pipelines")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<NGitLab.Models.Pipeline> GitLabGetPipelineAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectConnection projectConnection, long pipelineId) { }
        [Cake.Core.Annotations.CakeAliasCategory("Pipelines")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<NGitLab.Models.Pipeline> GitLabGetPipelineAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectIdentity projectIdentity, string accessToken, long pipelineId) { }
        [Cake.Core.Annotations.CakeAliasCategory("Pipelines")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<NGitLab.Models.Pipeline> GitLabGetPipelineAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerConnection serverConnection, NGitLab.Models.ProjectId project, long pipelineId) { }
        [Cake.Core.Annotations.CakeAliasCategory("Pipelines")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<NGitLab.Models.Pipeline> GitLabGetPipelineAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerIdentity serverIdentity, string accessToken, NGitLab.Models.ProjectId project, long pipelineId) { }
        [Cake.Core.Annotations.CakeAliasCategory("Pipelines")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<NGitLab.Models.Pipeline> GitLabGetPipelineAsync(this Cake.Core.ICakeContext context, string serverUrl, string accessToken, NGitLab.Models.ProjectId project, long pipelineId) { }
        [Cake.Core.Annotations.CakeAliasCategory("Pipelines")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.Job>> GitLabGetPipelineJobsAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectConnection projectConnection, long pipelineId, Cake.GitLab.GetPipelineJobsOptions? options = null) { }
        [Cake.Core.Annotations.CakeAliasCategory("Pipelines")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.Job>> GitLabGetPipelineJobsAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectIdentity projectIdentity, string accessToken, long pipelineId, Cake.GitLab.GetPipelineJobsOptions? options = null) { }
        [Cake.Core.Annotations.CakeAliasCategory("Pipelines")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.Job>> GitLabGetPipelineJobsAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerConnection serverConnection, NGitLab.Models.ProjectId project, long pipelineId, Cake.GitLab.GetPipelineJobsOptions? options = null) { }
        [Cake.Core.Annotations.CakeAliasCategory("Pipelines")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.Job>> GitLabGetPipelineJobsAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerIdentity serverIdentity, string accessToken, NGitLab.Models.ProjectId project, long pipelineId, Cake.GitLab.GetPipelineJobsOptions? options = null) { }
        [Cake.Core.Annotations.CakeAliasCategory("Pipelines")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.Job>> GitLabGetPipelineJobsAsync(this Cake.Core.ICakeContext context, string serverUrl, string accessToken, NGitLab.Models.ProjectId project, long pipelineId, Cake.GitLab.GetPipelineJobsOptions? options = null) { }
        [Cake.Core.Annotations.CakeAliasCategory("Projects")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<NGitLab.Models.Project> GitLabGetProjectAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectConnection projectConnection) { }
        [Cake.Core.Annotations.CakeAliasCategory("Projects")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<NGitLab.Models.Project> GitLabGetProjectAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectIdentity projectIdentity, string accessToken) { }
        [Cake.Core.Annotations.CakeAliasCategory("Projects")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<NGitLab.Models.Project> GitLabGetProjectAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerConnection serverConnection, NGitLab.Models.ProjectId project) { }
        [Cake.Core.Annotations.CakeAliasCategory("Projects")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<NGitLab.Models.Project> GitLabGetProjectAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerIdentity serverIdentity, string accessToken, NGitLab.Models.ProjectId project) { }
        [Cake.Core.Annotations.CakeAliasCategory("Projects")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<NGitLab.Models.Project> GitLabGetProjectAsync(this Cake.Core.ICakeContext context, string serverUrl, string accessToken, NGitLab.Models.ProjectId project) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<NGitLab.Models.Tag> GitLabRepositoryCreateTagAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectConnection projectConnection, string @ref, string name) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<NGitLab.Models.Tag> GitLabRepositoryCreateTagAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectIdentity projectIdentity, string accessToken, string @ref, string name) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<NGitLab.Models.Tag> GitLabRepositoryCreateTagAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerConnection serverConnection, NGitLab.Models.ProjectId project, string @ref, string name) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<NGitLab.Models.Tag> GitLabRepositoryCreateTagAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerIdentity serverIdentity, string accessToken, NGitLab.Models.ProjectId project, string @ref, string name) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<NGitLab.Models.Tag> GitLabRepositoryCreateTagAsync(this Cake.Core.ICakeContext context, string serverUrl, string accessToken, NGitLab.Models.ProjectId project, string @ref, string name) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task GitLabRepositoryDownloadFileAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectConnection projectConnection, string filePath, string @ref, Cake.Core.IO.FilePath destination) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task GitLabRepositoryDownloadFileAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectIdentity projectIdentity, string accessToken, string filePath, string @ref, Cake.Core.IO.FilePath destination) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task GitLabRepositoryDownloadFileAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerConnection serverConnection, NGitLab.Models.ProjectId project, string filePath, string @ref, Cake.Core.IO.FilePath destination) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task GitLabRepositoryDownloadFileAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerIdentity serverIdentity, string accessToken, NGitLab.Models.ProjectId project, string filePath, string @ref, Cake.Core.IO.FilePath destination) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task GitLabRepositoryDownloadFileAsync(this Cake.Core.ICakeContext context, string serverUrl, string accessToken, NGitLab.Models.ProjectId project, string filePath, string @ref, Cake.Core.IO.FilePath destination) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.Branch>> GitLabRepositoryGetBranchesAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectConnection projectConnection) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.Branch>> GitLabRepositoryGetBranchesAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectIdentity projectIdentity, string accessToken) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.Branch>> GitLabRepositoryGetBranchesAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerConnection serverConnection, NGitLab.Models.ProjectId project) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.Branch>> GitLabRepositoryGetBranchesAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerIdentity serverIdentity, string accessToken, NGitLab.Models.ProjectId project) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.Branch>> GitLabRepositoryGetBranchesAsync(this Cake.Core.ICakeContext context, string serverUrl, string accessToken, NGitLab.Models.ProjectId project) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string>> GitLabRepositoryGetFilesAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectConnection projectConnection, string @ref) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string>> GitLabRepositoryGetFilesAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectConnection projectConnection, string @ref, string path) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string>> GitLabRepositoryGetFilesAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectIdentity projectIdentity, string accessToken, string @ref) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string>> GitLabRepositoryGetFilesAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerConnection serverConnection, NGitLab.Models.ProjectId project, string @ref) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string>> GitLabRepositoryGetFilesAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectIdentity projectIdentity, string accessToken, string @ref, string path) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string>> GitLabRepositoryGetFilesAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerConnection serverConnection, NGitLab.Models.ProjectId project, string @ref, string path) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string>> GitLabRepositoryGetFilesAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerIdentity serverIdentity, string accessToken, NGitLab.Models.ProjectId project, string @ref) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string>> GitLabRepositoryGetFilesAsync(this Cake.Core.ICakeContext context, string serverUrl, string accessToken, NGitLab.Models.ProjectId project, string @ref) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string>> GitLabRepositoryGetFilesAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerIdentity serverIdentity, string accessToken, NGitLab.Models.ProjectId project, string @ref, string path) { }
        [Cake.Core.Annotations.CakeAliasCategory("Repository")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string>> GitLabRepositoryGetFilesAsync(this Cake.Core.ICakeContext context, string serverUrl, string accessToken, NGitLab.Models.ProjectId project, string @ref, string path) { }
        [Cake.Core.Annotations.CakeAliasCategory("Pipelines")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task GitLabSetPipelineNameAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectConnection projectConnection, long pipelineId, string name) { }
        [Cake.Core.Annotations.CakeAliasCategory("Pipelines")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task GitLabSetPipelineNameAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ProjectIdentity projectIdentity, string accessToken, long pipelineId, string name) { }
        [Cake.Core.Annotations.CakeAliasCategory("Pipelines")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task GitLabSetPipelineNameAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerConnection serverConnection, NGitLab.Models.ProjectId project, long pipelineId, string name) { }
        [Cake.Core.Annotations.CakeAliasCategory("Pipelines")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task GitLabSetPipelineNameAsync(this Cake.Core.ICakeContext context, Cake.GitLab.ServerIdentity serverIdentity, string accessToken, NGitLab.Models.ProjectId project, long pipelineId, string name) { }
        [Cake.Core.Annotations.CakeAliasCategory("Pipelines")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static System.Threading.Tasks.Task GitLabSetPipelineNameAsync(this Cake.Core.ICakeContext context, string serverUrl, string accessToken, NGitLab.Models.ProjectId project, long pipelineId, string name) { }
        [Cake.Core.Annotations.CakeAliasCategory("Helpers")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static Cake.GitLab.ProjectIdentity? GitLabTryGetCurrentProjectIdentity(this Cake.Core.ICakeContext context) { }
        [Cake.Core.Annotations.CakeAliasCategory("Helpers")]
        [Cake.Core.Annotations.CakeMethodAlias]
        public static Cake.GitLab.ServerIdentity? GitLabTryGetCurrentServerIdentity(this Cake.Core.ICakeContext context) { }
    }
    public interface IGitLabProvider
    {
        System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.MergeRequest>> GetMergeRequestsAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project, Cake.GitLab.GetMergeRequestsOptions? options);
        System.Threading.Tasks.Task<NGitLab.Models.Pipeline> GetPipelineAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project, long pipelineId);
        System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.Job>> GetPipelineJobsAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project, long pipelineId, Cake.GitLab.GetPipelineJobsOptions? options);
        System.Threading.Tasks.Task<NGitLab.Models.Project> GetProjectAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project);
        System.Threading.Tasks.Task<NGitLab.Models.Tag> RepositoryCreateTagAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project, string @ref, string name);
        System.Threading.Tasks.Task RepositoryDownloadFileAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project, string filePath, string @ref, Cake.Core.IO.FilePath destination);
        System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NGitLab.Models.Branch>> RepositoryGetBranchesAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project);
        System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string>> RepositoryGetFilesAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project, string @ref);
        System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string>> RepositoryGetFilesAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project, string @ref, string path);
        System.Threading.Tasks.Task SetPipelineNameAsync(string serverUrl, string accessToken, NGitLab.Models.ProjectId project, long pipelineId, string name);
        Cake.GitLab.ProjectIdentity? TryGetCurrentProjectIdentity();
        Cake.GitLab.ServerIdentity? TryGetCurrentServerIdentity();
    }
    public enum JobScope
    {
        [System.Runtime.Serialization.EnumMember(Value="created")]
        Created = 0,
        [System.Runtime.Serialization.EnumMember(Value="pending")]
        Pending = 1,
        [System.Runtime.Serialization.EnumMember(Value="running")]
        Running = 2,
        [System.Runtime.Serialization.EnumMember(Value="failed")]
        Failed = 3,
        [System.Runtime.Serialization.EnumMember(Value="success")]
        Success = 4,
        [System.Runtime.Serialization.EnumMember(Value="canceled")]
        Canceled = 5,
        [System.Runtime.Serialization.EnumMember(Value="skipped")]
        Skipped = 6,
        [System.Runtime.Serialization.EnumMember(Value="waiting_for_resource")]
        WaitingForResource = 7,
        [System.Runtime.Serialization.EnumMember(Value="manual")]
        Manual = 8,
    }
    public enum MergeRequestState
    {
        Opened = 0,
        Closed = 1,
        Locked = 2,
        Merged = 3,
    }
    public static class MergeRequestStateExtensions
    {
        public static NGitLab.Models.MergeRequestState ToNGitLabMergeRequestState(this Cake.GitLab.MergeRequestState state) { }
    }
    public class ProjectConnection : Cake.GitLab.ProjectIdentity, System.IEquatable<Cake.GitLab.ProjectConnection>
    {
        public ProjectConnection(Cake.GitLab.ProjectIdentity projectIdentity, string accessToken) { }
        public ProjectConnection(Cake.GitLab.ServerConnection server, string projectPath) { }
        public ProjectConnection(Cake.GitLab.ServerConnection server, string @namespace, string project) { }
        public ProjectConnection(Cake.GitLab.ServerIdentity server, string projectPath, string accessToken) { }
        public ProjectConnection(Cake.GitLab.ServerIdentity server, string @namespace, string project, string accessToken) { }
        public Cake.GitLab.ServerConnection Server { get; }
        public string AccessToken { get; init; }
        public virtual bool Equals(Cake.GitLab.ProjectConnection? other) { }
        public override int GetHashCode() { }
    }
    public class ProjectIdentity : System.IEquatable<Cake.GitLab.ProjectIdentity>
    {
        public ProjectIdentity(Cake.GitLab.ServerIdentity server, string projectPath) { }
        public ProjectIdentity(Cake.GitLab.ServerIdentity server, string @namespace, string project) { }
        public string Namespace { get; init; }
        public string ProjectPath { get; init; }
        public string Project { get; init; }
        public Cake.GitLab.ServerIdentity Server { get; init; }
        public virtual bool Equals(Cake.GitLab.ProjectIdentity? other) { }
        public override int GetHashCode() { }
        public static Cake.GitLab.ProjectIdentity FromGitRemoteUrl(string remoteUrl) { }
        public static bool TryGetFromGitRemoteUrl(string remoteUrl, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Cake.GitLab.ProjectIdentity? projectIdentity) { }
    }
    public class ServerConnection : Cake.GitLab.ServerIdentity, System.IEquatable<Cake.GitLab.ServerConnection>
    {
        public ServerConnection(Cake.GitLab.ServerIdentity identity, string accessToken) { }
        public ServerConnection(string host, string accessToken) { }
        public ServerConnection(string protocol, string host, string accessToken) { }
        public ServerConnection(string protocol, string host, int port, string accessToken) { }
        public string AccessToken { get; init; }
        public virtual bool Equals(Cake.GitLab.ServerConnection? other) { }
        public override int GetHashCode() { }
    }
    public class ServerIdentity : System.IEquatable<Cake.GitLab.ServerIdentity>
    {
        public ServerIdentity(string host) { }
        public ServerIdentity(string protocol, string host) { }
        public ServerIdentity(string protocol, string host, int port) { }
        public string Host { get; init; }
        public int Port { get; init; }
        public string Protocol { get; init; }
        public string Url { get; init; }
        public virtual bool Equals(Cake.GitLab.ServerIdentity? other) { }
        public override int GetHashCode() { }
        public static Cake.GitLab.ServerIdentity FromUrl(string url) { }
    }
}
namespace Cake.GitLab.Testing
{
    public interface IGitLabCakeContext : Cake.Core.ICakeContext
    {
        Cake.GitLab.IGitLabProvider GitLab { get; }
    }
}