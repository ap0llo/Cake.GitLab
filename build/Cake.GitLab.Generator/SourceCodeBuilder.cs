using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Grynwald.XmlDocs;
using Microsoft.CodeAnalysis;

namespace Cake.GitLab.Generator;

public class SourceCodeBuilder
{
    private const string s_IndentChars = "    ";

    private StringBuilder m_StringBuilder = new();
    private int m_Indent = 0;

    public SourceCodeBuilder()
    {
        m_StringBuilder.AppendLine("// <auto-generated/>");
        m_StringBuilder.AppendLine();
    }


    public void Append(string value) => m_StringBuilder.Append(value);

    public void Append(ITypeSymbol symbol)
    {
        m_StringBuilder.Append("global::");
        m_StringBuilder.Append(GetFullName(symbol));
    }

    public void AppendParameter(IParameterSymbol parameter)
    {
        Append(parameter.Type);
        Append(" ");
        Append("@");
        Append(parameter.Name);
    }

    public void AppendArgument(IParameterSymbol parameter)
    {
        Append("@");
        Append(parameter.Name);
    }

    public void AppendArguments(IEnumerable<string> arguments)
    {
        var first = true;
        foreach (var argument in arguments)
        {
            if (!first)
            {
                m_StringBuilder.Append(", ");
            }
            first = false;

            m_StringBuilder.Append("@");
            m_StringBuilder.Append(argument);
        }
    }

    public void AppendLine(string value) => m_StringBuilder.AppendLine(value);

    public void AppendLine() => m_StringBuilder.AppendLine();

    public void AppendFileScopedNamespace(INamespaceSymbol @namespace)
    {
        m_StringBuilder.Append($"namespace ");
        m_StringBuilder.Append(GetFullName(@namespace));
        m_StringBuilder.Append(";");
        m_StringBuilder.AppendLine();

        m_StringBuilder.AppendLine();
    }

    public void Append(MemberElement memberDocumentation)
    {
        XmlDocumentationSerializer.WriteDocumentation(memberDocumentation, this);
    }

    public void BeginLine()
    {
        for (int i = 0; i < m_Indent; i++)
        {
            m_StringBuilder.Append(s_IndentChars);
        }
    }

    public void EndLine()
    {
        m_StringBuilder.AppendLine();
    }

    public void BeginBlock()
    {
        for (int i = 0; i < m_Indent; i++)
        {
            m_StringBuilder.Append(s_IndentChars);
        }
        m_StringBuilder.AppendLine("{");

        m_Indent += 1;
    }

    public void EndBlock()
    {
        m_Indent -= 1;

        for (int i = 0; i < m_Indent; i++)
        {
            m_StringBuilder.Append(s_IndentChars);
        }
        m_StringBuilder.AppendLine("}");

    }

    public override string ToString() => m_StringBuilder.ToString();


    private static string GetFullName(INamespaceOrTypeSymbol symbol)
    {
        string name;
        if (symbol.ContainingNamespace is not null && GetFullName(symbol.ContainingNamespace) is string parentName && !String.IsNullOrEmpty(parentName))
        {
            name = $"{parentName}.{symbol.Name}";
        }
        else
        {
            name = symbol.Name;
        }

        if (symbol is INamedTypeSymbol namedTypeSymbol)
        {
            if (namedTypeSymbol.Arity > 0)
            {
                name += $"<{String.Join(",", namedTypeSymbol.TypeArguments.Select(GetFullName))}>";
            }
        }

        return name;
    }
}
